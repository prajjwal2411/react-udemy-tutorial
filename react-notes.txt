Section 2 - JS Refresher
	2.1 - let & const
			- use let for variables
			- use const for constant values
		- Arrow Functions
			- no need of parenthesis if there is exactly one argument
			- If u r returning only the return statement then, {} & return keyword is not needed
		- Exports & Imports
			- If using default keyword, I,ports default & ONLY export of the file, Name in the receiving file is upto user
			- If not using default keyword, import stuff by using its name.
			- for alias, use as keyword
			- for importing everyting, use * operator
		- Classes
			- blueprint for objects
			- to instantiate a class, use new keyword
			- implement inheritance using extends keyword
			- Use super keyword in derived class, to access inherited constrcutor
		- Classes, Properties & Methods
			- Properties are variables attached to classes/objects
			- Methods are like functions attached to classes/objects
			- ES7 Feature - to initialize a property, we can skip initializing it in the constructor block
			- ES7 Feature - to define a function we can use it as arrow function
			E.g. classMethod = () = {}
		- Spread & Rest Operators
			- ...
			- Spread -> Used to spli array elements OR object properties
			E.g. With Array -> const newArray = [...oldArray, 1, 2]
			E.g. with Object -> const newObject = {..oldObject, newProp: 5}
			- If old object also has newProp property, it will be overwritten
			- Rest -> Used to merge a list of function arguments into an Array
			E.g. function sortArgs(...args){
					return args.sort()
				}
		- Destructuring
			- Easily extract array elements or object properties & store them in variables

		- Reference & Primitive type Refresher
			- Primitive Types
				- numbers, strings, booleans are primitive types
				- When you create a copy of these data types, the controller actually creates a new memory location & assign that location to that variable
			- Reference Types
				- Arrays, Objects & Function are reference types
				- When you define these data types, controller is storing a pointer in the variable & that pointer, points to the memory loc where object is stored, So If you create a copy with new variable, it points to the same location as well.
				- These types creates a mutable copy of themselves
				- To create immutable copy of these types, use spread operator
		- Array Methods
			- map
				- Returns a new array, by performing some functionality on every element of the array
Section 3 - React Basiscs & Working with Components
	3.1 - What are components? & why is react all about them?
			- React is a js lib, for building UI
			- Componets are reusable building blocks, in application's UI
		- React code is written in a declarative way
			- React allows you to create re-usable & reactive components consisting of HTML, JS & CSS
			- Declarative Approach - Define the desired target state(s) & let React figure out the actual JS DOM Instructions
		- Creating a new React Project
			- use npx create-react-app <app-name> to create React project
		- Analyzing a Standard React Project
			- First file to execute is index.js
			- createRoot method creates the main entry point into the react application
			- index.html, is the only html file that is loaded in the browser
		- Introduction to JSX
			- JSX - Javascrit XML
			- HTML code inside javascript code
		- How React Works
			- With vanilla JS, developer have to write code using imperative appraoch, because dev needs to instruct step by step process on how to render elements on the DOM.
			- With React the step-by-step process is done by React Libraries
		- Building a first custom component
			- Good Practice: Every component has its own file
			- Component Tree
				- App/default component sits at the top & all the other components renders under it
			- Good Practice: Name of the Components should be capital letter of every word with .js extension
			- A component in react is just a special javascript function which return JSX Code
			- Components name should be strictly have Uppercase letters, because react have a simple rule, which states that, if it starts with small case letter, it is a built-in HTML element & if it starts with upper case letter it is a custom component element.
			- In react adjust JSX elements must be wrapped in <></>(React fragment elements) or inside a single element such as div or span tags, because the program cannot return more than one element.
		- Writing more complex JSX code
			- Every return statement must have only one root element
		- Adding Basic CSS Styling
			- use className for adding
		- Outputting Dynamic Data & Working with Expressions in JSX
			- To output dynamic content use curly braces
		- Passing data via "Props"
			- Components can't access data stored in another components
			- Using Props we can pass data from one componet to another component, & access that element in another component
			-  These are nothing but attributes for custom elements, similar to attributes for HTML elements
			- In react we call them Props, which also stands for properties
			- By using the propFdecs functionality of react, we can make custom components reusable throughout the application
		- Adding normal JS Logic to Components
			- Godd Practice: If you want to do additional operation inside custom component, with value of props, don't put it in JSX code.
		- Splitting Components into Multiple Components
		- The Concept of "Composition" ("children props")
			- Building UI, from smaller building blocks is alled composition.
			- You can't use custom components as wrapper for other kind of content
			- To create such wrapper components use props.children
			- This prop is received by every custom component, even if the dev is not setting it explicitly
			- children is reserved name & its(props.children) value will always be the content b/w opening & closing tags of your custom component
		- Summary
			- Understanding of components
			- React Core Syntax & JSX
			- Working with Data
			- working with components
			- Props
			- Children property on props
		- Closer Look at JSX
		- Organising Component Files
Section 4 - React state & working with events
	4.1 - Module Introducton
			- UI & States in react
			- Handling Events
			- Closer look at component & state

		- Listening to Events & Working with Event Handlers
			- If we are executing certain block after an event, we don't use parenthesis(we don't execute the function in HTML(JSX) code), we point to it
			- Because if we use parenthesis, JS will execute that function, & the desired event function will run without clicking on it.
		- How Components Functions are Executed
			- Our React Components are nothing but JSX functions, so they will not update value on frontend what angular does
			- We are calling those components(Functions) initially/when we want to display it, but we are not calling them again.
			- To show the updated value on the "title" field, we need to call our react component again.
			- So we need to tell react that something have changed, & that particular component should be re-evaluate
		- Working with "state"
			- The solution to our previous problem are react states
			- How? - By using useState
			- the useState is a predefined function in React Library, It is a react hook, all the hooks in react uses, "use" as prefix
			- this function allows us to define values as state where changes to these values should reflect in the component function being called again
			- IMPORTANT - We use useState inside our component function only, but their is one exception to it as well.
			- with useState we create a special kind of variable that is going to change its state in future
			- useState: 
				arguments: Special variable which changes its state/value in future.
				return: It returns an array
					0. variable: It returns that special variable with updated value.
					1. function: which we call to change/update the value to that variable
						arrgument of returned function: new value that you want to set
			- useState returns variables naming convention
				- the variable that we are using in the JSX coed.
				- same variable but with "set" as prefix	
			- the first state is set by the argument that we have passed to useState hook.
			- For setting a new value, call the function that has been returned by the useState hook, with an argument of whatever the new value you want to set, this will update the value in DOM as well.
			- Reason for not using simple "=" operator & going for the useState hook
			- The reason is, the whole component will be updated again with the new value
			- If you have data, which might change, & where changes to that data should be reflectedon the UI the we need state, because regular variables will not do the trick
			- With react state, we can set & change values, & when that state changes(set/update of data values), then only that particular react component will re-evaluate that component only
		- A closer look at "state" hook
			- useState registers some state, so some value as a state
			- useState registers the state for a specific component instance
			- Component Instance
				- For E.g. ExpenseItem component is used 4 times, so there are 4 instances of ExpenseItem component
				- Every instance has its own state, which is not related to rest of the instances
				- Every time an instance is called, a new separate state is created
				- Proof of the above line: use console.log in ExpenseItem component inside the exported function, it will execute 4 times
				- After you change the desired value using useState hook, you will see it(console mentioned in previous point) again once because that component or component instance is re-evaluated again
			- We are using const while array destructring because we are not assigning any new value to title variable again, also while working with useState, we tell react that it should manage some value for us, which we cannot see that variable itself
			- Rect keeps track, where we have used useState for the first time
			- when we call useState for first time, it will set the inital value(props.title), & after re-execution of the component, because of state change(calling of stateTitle function with latest value as an argument), React will not initialie the state, instead it will update the state & gives the new state instead(updates the new value on DOM).
		- State can be updated in many ways
			- with setTimeout function
			- with response from HTTP requests
			- etc.
		- Adding Form Inputs
		- Listening to User Input
			- Similar to event property in addEventListener method in JS, we receive the event property in React after using any onEventMethod
			- 



